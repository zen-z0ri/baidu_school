/**
 * Created by tung on 13/06/17.
 */
/**
 * JS is static scope(lexical scope) its variable value decided by where is defined;
 * While dynamic scope: the variable value is decided by where its invoke
 */
console.log("************static scope****************")
let i = 1;
const f1 = function() {
  i += 1;
  console.log(i);
};
const f2 = function() {
  let i = 2;
  f1();
  f1();
};
const f3 = function() {
  f1();
  f1();
};
f2();//2, 3 not 3,4 --> static
f3();//4, 5
console.log("************primative --> stack; reference --> heap****************");
let obj1 = {
    name: 'test',
    age: 21
};
function addOneYear(obj) {
    obj.age+=1;
}
addOneYear(obj1);
console.log(obj1.age);

let str = 'test';
function changeStr(input) {
    input+'__';
}
changeStr(str);
console.log(str);
console.log("**************closure*****************");
/**
 * An entity that is generated by **saving the local scope environment to mermory**
 * , when the function is defined.(Too many closure waste resource)
 * The flowing c and d don't share value, but they have their own closure copy.
 */
function a() {
  let i = 0;
  function b() { console.log(++i); }
  return b;
}
let c = a();
let d = a();
console.log("d: ");
d();
console.log("c: ");
c();
console.log("c: ");
c();
console.log("d: ");
d();
console.log("******and*******");
function ft1(){
  var n=999;
  ++n;
  function ft2(){
    return ++n;
  }
  return ft2;
}
var result=ft1();
console.log(result()); // 1001
console.log(result()); // 1002
console.log(result()); // 1003

